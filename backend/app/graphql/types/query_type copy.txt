# frozen_string_literal: true

module Types
  class QueryType < Types::BaseObject
    
    field :weather, Types::WeatherType, null: false do
      argument :city, String, required: true
      argument :duration, Int, required: true
      argument :skin_type, String, required: true
    end

    def weather(city:, duration:, skin_type:)
      raw_data = WeatherFetcher.new(city).call
      WeatherAnalyzer.new(raw_data, duration, skin_type).analyze
    end

    field :node, Types::NodeType, null: true, description: "Fetches an object given its ID." do
      argument :id, ID, required: true, description: "ID of the object."
    end

    def node(id:)
      context.schema.object_from_id(id, context)
    end

    field :nodes, [Types::NodeType, null: true], null: true, description: "Fetches a list of objects given a list of IDs." do
      argument :ids, [ID], required: true, description: "IDs of the objects."
    end

    def nodes(ids:)
      ids.map { |id| context.schema.object_from_id(id, context) }
    end

    # Add root-level fields here.
    # They will be entry points for queries on your schema.

    # TODO: remove me
    field :test_field, String, null: false,
      description: "An example field added by the generator"
    def test_field
      "Hello World!"
    end
  end
end
